generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String    @id @default(cuid())
  firstname         String?
  lastname          String?
  phone             String?   @unique
  email             String    @unique
  isEmailVerified   Boolean?  @default(false)
  emailVerifiedDate DateTime?
  password          String?
  role              Role      @default(USER)
  isDeleted         Boolean   @default(false)
  lastLogin         DateTime? @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  orders            Order[]
  stockReservations StockReservation[]
  EmailVerificationToken EmailVerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Session {
  sid       String   @id
  sess      Json
  expire    DateTime
  @@map("user_sessions")
}


// ORDER MANAGEMENT

enum ReservationStatus {
  ACTIVE
  CONFIRMED
  EXPIRED
  CANCELLED
}

model StockReservation {
  id        String            @id @default(cuid())
  userId    String
  productId String
  orderId   String?
  quantity  Int
  status    ReservationStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user      User              @relation(fields: [userId], references: [id])
  product   Product           @relation(fields: [productId], references: [id])
  order     Order?            @relation(fields: [orderId], references: [id])

  @@index([productId, status, expiresAt])
  @@index([userId])
}

enum Status {
  PENDING
  PROCESSING
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
  COMPLETED
}

enum PaymentStatus  {
  PENDING
  COMPLETED
  FAILED
}

model Order {
  id                    String        @id @default(cuid())
  userId                String    
  status                Status        @default(PENDING)
  totalPrice            Decimal       @db.Decimal(10, 2)
  shippingPrice         Decimal       @db.Decimal(10, 2) @default(0.00)
  paymentMethod         String?       
  paymentStatus         PaymentStatus  @default(PENDING)
  paymentIntentId       String?
  paymentMethodId       String?
  paidAt                DateTime?
  shippingAddress       String?
  notes                 String?
  isDeleted             Boolean       @default(false)
  orderItems            OrderItem[]
  stockReservations     StockReservation[]
  user                  User          @relation(fields: [userId], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal   @db.Decimal(10, 2)
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Product {
  id          String      @id @default(cuid())
  name        String      
  description String?
  price       Decimal     @db.Decimal(10, 2)
  stock       Int
  imageUrl    String?
  slug        String      @unique
  isPublished Boolean     @default(false)
  sku         String?
  brand       String?
  categoryid  String?
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category?   @relation(fields: [categoryid], references: [id])
  orderItems  OrderItem[]
  stockReservations StockReservation[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Product Product[]
}